package doc

import (
	"bytes"
	"fmt"
	"io"
	"regexp"
	"sort"
	"strings"
	"text/template"
	"time"

	"github.com/spf13/cobra"
)

type CmdOutline struct {
	Name          string   // full path to the command
	Short         string   // short description of the command
	Long          string   // long description of the command
	UseLine       string   // full usage for a given command (including parents)
	Example       string   // examples of how to use the command
	Flags         string   // default values of all non-inherited flags as a string
	FlagSlice     []string // Flags represented as a slice
	ParentFlags   string   // default values of all inherited flags as a string
	ParentLink    string   // rendered internal link to the parent command
	ChildrenLinks []string // rendered internal links to the child commands as a slice
	RelatedLinks  []string // rendered internal links to the related commands as a slice
	CommandLink   string   // rendered internal link to the command
	HeaderScale   int      // integer scale indicating depth of the current command
	AutoGenTag    string   // automatically generated tag by Cobra
}

func generateCmdOutline(cmd *cobra.Command, linkHandler func(string) string) *CmdOutline {
	name := cmd.CommandPath()
	short := cmd.Short
	long := cmd.Long
	if len(long) == 0 {
		long = short
	}

	useLine := cmd.UseLine()

	example := cmd.Example

	buf := new(bytes.Buffer)

	var flagString string
	flags := cmd.NonInheritedFlags()
	flags.SetOutput(buf)
	if flags.HasAvailableFlags() {
		flags.PrintDefaults()
		flagString = buf.String()
		buf.Reset()
	}

	var flagSlice []string
	flagSplitter := regexp.MustCompile("\n *-") // clips first '-' in flags starting the second flag
	numberOfFlags := strings.Count(flagString, "--")
	flagSlice = flagSplitter.Split(flagString, numberOfFlags)
	for i, flag := range flagSlice {
		if i > 0 {
			flagSlice[i] = "-" + flag // add clipped '-' back to flags
		}
	}

	var parentFlagString string
	parentFlags := cmd.InheritedFlags()
	parentFlags.SetOutput(buf)
	if parentFlags.HasAvailableFlags() {
		parentFlags.PrintDefaults()
		parentFlagString = buf.String()
		buf.Reset()
	}

	headerScale := 0
	var parentLink string
	if cmd.HasParent() {
		parent := cmd.Parent()
		pname := parent.CommandPath()
		link := pname + ".md"
		link = strings.Replace(link, " ", "_", -1)
		parentLink = fmt.Sprintf("* [%s](%s)\t - %s\n", pname, linkHandler(link), parent.Short)

		headerScale = 1
		for parent.HasParent() {
			headerScale += 1
			parent = parent.Parent()
		}
	}

	var childrenLinks []string
	children := cmd.Commands()
	sort.Sort(byName(children))

	for _, child := range children {
		var childLink string
		if !child.IsAvailableCommand() || child.IsAdditionalHelpTopicCommand() {
			continue
		}
		cname := name + " " + child.Name()
		link := cname + ".md"
		link = strings.Replace(link, " ", "_", -1)
		childLink = fmt.Sprintf("* [%s](%s)\t - %s\n", cname, linkHandler(link), child.Short)
		childrenLinks = append(childrenLinks, childLink)
	}

	var relatedLinks []string
	relatedCmds := cmd.RelatedCommands()

	for _, relCmd := range relatedCmds {
		var relatedLink string
		if !relCmd.IsAvailableCommand() || relCmd.IsAdditionalHelpTopicCommand() {
			continue
		}
		rname := relCmd.CommandPath()
		link := rname + ".md"
		link = strings.Replace(link, " ", "_", -1)
		relatedLink = fmt.Sprintf("* [%s](%s)\t - %s\n", rname, linkHandler(link), relCmd.Short)
		relatedLinks = append(relatedLinks, relatedLink)
	}

	var commandLink string
	link := name + ".md"
	link = strings.Replace(link, " ", "_", -1)
	commandLink = fmt.Sprintf("%s", linkHandler(link))

	autoGenTag := "Auto generated by spf13/cobra on " + time.Now().Format("2-Jan-2006") + "\n"

	return &CmdOutline{
		Name:          name,
		Short:         short,
		Long:          long,
		UseLine:       useLine,
		Example:       example,
		Flags:         flagString,
		FlagSlice:     flagSlice,
		ParentFlags:   parentFlagString,
		ParentLink:    parentLink,
		ChildrenLinks: childrenLinks,
		RelatedLinks:  relatedLinks,
		CommandLink:   commandLink,
		HeaderScale:   headerScale,
		AutoGenTag:    autoGenTag,
	}
}

func GenDocsCustomTemplate(cmd *cobra.Command, w io.Writer, linkHandler func(string) string, template *template.Template) error {
	cmd.InitDefaultHelpCmd()
	cmd.InitDefaultHelpFlag()

	buf := new(bytes.Buffer)

	cmdOutline := generateCmdOutline(cmd, linkHandler)

	err := writeToTemplate(cmdOutline, template, buf)
	if err != nil {
		return err
	}

	_, err = buf.WriteTo(w)
	return err
}

func writeToTemplate(cmdOutline *CmdOutline, template *template.Template, buf *bytes.Buffer) error {
	err := template.Execute(buf, cmdOutline)
	if err != nil {
		return fmt.Errorf("executing template: %w", err)
	}
	return nil
}
